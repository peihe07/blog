<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vue.js on Peihe's blog</title><link>https://peihe07.uno/tags/vue.js/</link><description>Recent content in Vue.js on Peihe's blog</description><generator>Hugo</generator><language>en</language><copyright>Peihe</copyright><lastBuildDate>Mon, 30 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://peihe07.uno/tags/vue.js/index.xml" rel="self" type="application/rss+xml"/><item><title>Vue.js</title><link>https://peihe07.uno/notes/2024-12-30-vue_notes/</link><pubDate>Mon, 30 Dec 2024 00:00:00 +0000</pubDate><guid>https://peihe07.uno/notes/2024-12-30-vue_notes/</guid><description>&lt;h1 id="vuejs-專案結構與檔案詳細說明">Vue.js 專案結構與檔案詳細說明&lt;/h1>
&lt;p>以下解析一個使用 Vue CLI 建立的典型前端 Vue.js 專案結構，並說明各個檔案與資料夾的作用與必要性。&lt;/p>
&lt;h2 id="目錄">目錄&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="#1-%E5%B0%88%E6%A1%88%E6%A0%B9%E7%9B%AE%E9%8C%84%E6%AA%94%E6%A1%88">1. 專案根目錄檔案&lt;/a>&lt;/li>
&lt;li>&lt;a href="#2-public-%E8%B3%87%E6%96%99%E5%A4%BE">2. public 資料夾&lt;/a>&lt;/li>
&lt;li>&lt;a href="#3-src-%E8%B3%87%E6%96%99%E5%A4%BE">3. src 資料夾&lt;/a>&lt;/li>
&lt;li>&lt;a href="#4-%E5%85%B6%E4%BB%96%E7%92%B0%E5%A2%83%E8%A8%AD%E5%AE%9A%E6%AA%94">4. 其他環境設定檔&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="1-專案根目錄檔案">1. 專案根目錄檔案&lt;/h2>
&lt;h3 id="packagejson">package.json&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>功能說明：&lt;/strong>&lt;br>
記錄專案的元資料、依賴套件、開發與生產環境的指令（例如 &lt;code>serve&lt;/code>、&lt;code>build&lt;/code>、&lt;code>test&lt;/code>）等設定。&lt;/li>
&lt;li>&lt;strong>為什麼需要：&lt;/strong>&lt;br>
統一管理專案的相依套件與腳本，方便團隊成員建立與執行開發環境。&lt;/li>
&lt;/ul>
&lt;h3 id="package-lockjson--yarnlock">package-lock.json / yarn.lock&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>功能說明：&lt;/strong>&lt;br>
鎖定專案所使用的套件版本，確保在不同環境中安裝的版本一致。&lt;/li>
&lt;li>&lt;strong>為什麼需要：&lt;/strong>&lt;br>
避免因版本不一致而導致錯誤，保持團隊開發的一致性。&lt;/li>
&lt;/ul>
&lt;h3 id="readmemd">README.md&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>功能說明：&lt;/strong>&lt;br>
提供專案簡介、安裝步驟、使用說明以及其他相關資訊。&lt;/li>
&lt;li>&lt;strong>為什麼需要：&lt;/strong>&lt;br>
讓新進成員或使用者能夠快速了解並上手專案。&lt;/li>
&lt;/ul>
&lt;h3 id="vueconfigjs-可選">vue.config.js (可選)&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>功能說明：&lt;/strong>&lt;br>
用於覆寫 Vue CLI 預設的 Webpack 配置，例如設定代理、路徑別名、資源目錄等。&lt;/li>
&lt;li>&lt;strong>為什麼需要：&lt;/strong>&lt;br>
提供彈性，讓你能根據專案需求調整建置流程與設定。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="2-public-資料夾">2. public 資料夾&lt;/h2>
&lt;h3 id="indexhtml">index.html&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>功能說明：&lt;/strong>&lt;br>
專案的主要 HTML 模板，Vue.js 應用會注入到此文件中預先定義好的掛載點（通常是 &lt;code>&amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code>）。&lt;/li>
&lt;li>&lt;strong>為什麼需要：&lt;/strong>&lt;br>
作為單頁應用（SPA）的入口點，決定初始 HTML 結構與靜態內容。&lt;/li>
&lt;/ul>
&lt;h3 id="其他靜態資源">其他靜態資源&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>功能說明：&lt;/strong>&lt;br>
放置不需要經過 Webpack 處理的靜態檔案，如 favicon、外部庫文件或其他第三方資源。&lt;/li>
&lt;li>&lt;strong>為什麼需要：&lt;/strong>&lt;br>
確保這些檔案在最終建置時能夠原封不動地複製到輸出目錄，並正確載入。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="3-src-資料夾">3. src 資料夾&lt;/h2>
&lt;h3 id="mainjs">main.js&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>功能說明：&lt;/strong>&lt;br>
專案的主要進入點，初始化 Vue 實例，整合路由（Vue Router）、狀態管理（Vuex）等，並將根元件掛載到 DOM 中。&lt;/li>
&lt;li>&lt;strong>為什麼需要：&lt;/strong>&lt;br>
建立與啟動整個 Vue 應用，是專案運行的核心。&lt;/li>
&lt;/ul>
&lt;h3 id="appvue">App.vue&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>功能說明：&lt;/strong>&lt;br>
根元件，作為應用的主要容器，通常包含全局佈局與樣式，並嵌入其他子元件。&lt;/li>
&lt;li>&lt;strong>為什麼需要：&lt;/strong>&lt;br>
統一管理應用結構與佈局，作為其他元件的父容器。&lt;/li>
&lt;/ul>
&lt;h3 id="assets-資料夾">assets 資料夾&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>功能說明：&lt;/strong>&lt;br>
存放圖片、字體、CSS 檔案或其他需要經過 Webpack 處理的靜態資源。&lt;/li>
&lt;li>&lt;strong>為什麼需要：&lt;/strong>&lt;br>
讓這些資源能夠在編譯時進行優化、壓縮與管理，提升效能與可維護性。&lt;/li>
&lt;/ul>
&lt;h3 id="components-資料夾">components 資料夾&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>功能說明：&lt;/strong>&lt;br>
存放可重用的 Vue 元件，每個元件通常是一個 &lt;code>.vue&lt;/code> 檔案，包含模板、邏輯與樣式。&lt;/li>
&lt;li>&lt;strong>為什麼需要：&lt;/strong>&lt;br>
模組化應用開發，將 UI 與功能拆分成獨立且可重用的元件，增強維護性與開發效率。&lt;/li>
&lt;/ul>
&lt;h3 id="views-或-pages-資料夾">views (或 pages) 資料夾&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>功能說明：&lt;/strong>&lt;br>
當應用較大時，可以將不同的頁面（視圖）存放在此處，通常與路由配置相對應。&lt;/li>
&lt;li>&lt;strong>為什麼需要：&lt;/strong>&lt;br>
區分單頁應用（SPA）中的不同路由頁面，保持結構清晰。&lt;/li>
&lt;/ul>
&lt;h3 id="router-資料夾">router 資料夾&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>功能說明：&lt;/strong>&lt;br>
存放路由設定文件（通常是 &lt;code>index.js&lt;/code>），定義各個 URL 路徑與對應的元件。&lt;/li>
&lt;li>&lt;strong>為什麼需要：&lt;/strong>&lt;br>
管理前端路由，讓應用能夠根據 URL 變化載入不同頁面與元件。&lt;/li>
&lt;/ul>
&lt;h3 id="store-資料夾">store 資料夾&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>功能說明：&lt;/strong>&lt;br>
若使用 Vuex 管理應用狀態，則在此資料夾中定義 state、mutations、actions 與 getters 等。&lt;/li>
&lt;li>&lt;strong>為什麼需要：&lt;/strong>&lt;br>
集中管理應用狀態，方便元件之間的資料共享與同步。&lt;/li>
&lt;/ul>
&lt;h3 id="utils-或-services-資料夾-可選">utils 或 services 資料夾 (可選)&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>功能說明：&lt;/strong>&lt;br>
存放工具函數、API 請求封裝、數據處理邏輯等常用功能模組。&lt;/li>
&lt;li>&lt;strong>為什麼需要：&lt;/strong>&lt;br>
將常用功能模組化，減少重複程式碼，提升專案可維護性與擴展性。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="4-其他環境設定檔">4. 其他環境設定檔&lt;/h2>
&lt;h3 id="envenvdevelopmentenvproduction-等">.env、.env.development、.env.production 等&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>功能說明：&lt;/strong>&lt;br>
定義不同環境下的環境變數，例如 API 基本路徑、除錯模式等設定。&lt;/li>
&lt;li>&lt;strong>為什麼需要：&lt;/strong>&lt;br>
讓專案能夠根據部署環境輕鬆調整配置，而無需修改程式碼。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="vuejs-進階應用與生態系統補充說明">Vue.js 進階應用與生態系統補充說明&lt;/h1>
&lt;p>除了基礎的專案結構與檔案說明，Vue.js 生態系統提供了許多進階工具與最佳實踐，能協助你建立更高效、彈性及易於維護的前端應用。以下補充一些常見的延伸主題與應用情境：&lt;/p></description></item></channel></rss>